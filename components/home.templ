package components

import (
	"fmt"
	. "diikstra.fr/homeboard/models"
)

func getBlocksIds(ncols, nrows int) []string {
	ids := make([]string, ncols*nrows)
	for row := range nrows {
		for col := range ncols {
			ids[row*3+col] = fmt.Sprintf("card_%d_%d", row+1, col+1)
		}
	}
	return ids
}

css grid_template(ncols int, nrows int) {
	grid-template-columns: { templ.SafeCSSProperty(fmt.Sprintf("repeat(%d, minmax(0, 1fr))", ncols)) };
	grid-template-rows: { templ.SafeCSSProperty(fmt.Sprintf("repeat(%d, 33%%)", nrows)) };
}

templ Home(hl HomeLayoutData) {
	<div id="content" class="h-full w-full overflow-y-scroll">
		<div
			id="layout"
			class={ grid_template(hl.NCols, hl.NRows), "h-full w-full grid justify-items-center items-center" }
		>
			@HomeLayout(hl)
		</div>
	</div>
}

templ HomeLayout(hl HomeLayoutData) {
	for _, elem := range getBlocksIds(hl.NCols, hl.NRows) {
		<div id={ elem } class="w-full h-full p-2"></div>
	}
	<span hx-get="/home/modules" hx-trigger="revealed" class="absolute"></span>
}

templ BlockEdit(ids []string) {
	for _, id := range ids {
		@gridAddBlock(id)
	}
}

templ gridAddBlock(id string) {
	<div
		id={ id }
		role="button"
		hx-get={ "/home/add/list/" + id }
		hx-swap="beforeend"
		hx-target="#content"
		hx-swap-oob="true"
		class="w-[90%] h-[90%] bg-white bg-opacity-5 hover:bg-opacity-10 duration-300 rounded-xl relative"
	>
		<svg class="h-16 w-16 opacity-20 absolute top-1/2 -translate-y-1/2 left-1/2 -translate-x-1/2">
			<use href="#plus"></use>
		</svg>
	</div>
}

templ AddBlockPopup(hap HomeAddPopup) {
	<div
		class="absolute bg-black bg-opacity-25 backdrop-blur-xl h-2/3 w-1/3 top-1/2 -translate-y-1/2 left-1/2 -translate-x-1/2 rounded-[32px] px-8 py-8 flex flex-col"
		id="add-block-popup"
	>
		<div
			class="absolute top-8 right-8 hover:bg-white hover:bg-opacity-10 duration-200 p-2 rounded-xl"
			hx-get="data:text/html,"
			hx-target="#add-block-popup"
			hx-swap="delete"
		>
			<svg class="w-6 h-6 pointer-events-none">
				<use href="#x-mark"></use>
			</svg>
		</div>
		<h2 class="text-xl font-bold text-white mb-4">Select module</h2>
		<div class="flex flex-col space-y-2">
			for _, module := range hap.Modules {
				<div
					class="w-full bg-white bg-opacity-5 hover:bg-opacity-10 duration-200 border border-white border-opacity-20 rounded-xl py-2 px-4 flex items-center space-x-2"
					role="button"
					hx-post={ fmt.Sprintf("/home/modules/%s/%s", module.Name, hap.Position) }
					hx-target="#add-block-popup"
					hx-swap="delete"
				>
					<img src={ "/assets/images/modules/" + module.Icon + "/icon.png" } alt={ module.Icon + "_icon" } class="h-5"/>
					<p class="font-bold text-white">{ module.Name }</p>
				</div>
			}
		</div>
	</div>
}

templ ModuleEdit(moduleName string, position string) {
	<div id={ fmt.Sprintf("#content_%s", position) } class="h-full w-full p-2 flex space-x-4">
		<div
			role="button"
			class="flex flex-col items-center justify-center text-c-red bg-c-red bg-opacity-10 py-2 px-3 rounded-2xl border border-c-red border-opacity-15 
            h-full w-32 hover:bg-opacity-15 duration-200 mb-2"
            hx-delete={ fmt.Sprintf("/home/module/%s/%s", moduleName, position) }
            hx-target={ fmt.Sprintf("#%s", position) }
		>
			<svg class="w-5 h-5 mb-2"><use href="#trash"></use></svg>
			<p class="text-center">Delete</p>
		</div>
        // TODO: Add force refresh
		<div
			role="button"
			class="flex flex-col items-center justify-center text-c-cyan bg-c-cyan bg-opacity-10 py-2 px-3 rounded-2xl border border-c-cyan border-opacity-15 
            h-full w-32 hover:bg-opacity-15 duration-200"
		>
			<svg class="w-5 h-5 mb-2"><use href="#refresh"></use></svg>
			<p class="text-center">Force Refresh</p>
		</div>
	</div>

    <svg role="button" class="w-8 h-8 bg-white duration-200 rounded-lg bg-opacity-0 hover:bg-opacity-10 p-1"
        id={ fmt.Sprintf("edit_%s", position) } hx-swap-oob="true"
        hx-get={ fmt.Sprintf("/home/module/%s/%s", moduleName, position) }
        hx-swap="none"
    >
        <use href="#x-mark"></use>
    </svg>
}
